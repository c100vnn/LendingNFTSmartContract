/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTMarketInterface extends ethers.utils.Interface {
  functions: {
    "borrow(uint256)": FunctionFragment;
    "buyDirectly(uint256)": FunctionFragment;
    "cancelLend(uint256)": FunctionFragment;
    "cancelMarketItem(uint256)": FunctionFragment;
    "cancelMarketItemAuction(uint256)": FunctionFragment;
    "claimReward(uint256,uint256)": FunctionFragment;
    "createMarketItem(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "fetchAllLendItem()": FunctionFragment;
    "fetchItemsCreated(address)": FunctionFragment;
    "fetchLendHistory(uint256)": FunctionFragment;
    "fetchMarketItems()": FunctionFragment;
    "fetchMyBorrow(address)": FunctionFragment;
    "fetchMyLend(address)": FunctionFragment;
    "fetchMyNFTs(address)": FunctionFragment;
    "fetchOffersOfItem(uint256)": FunctionFragment;
    "fetchSellHistoryOfToken(uint256)": FunctionFragment;
    "getLend(uint256)": FunctionFragment;
    "getListingPrice()": FunctionFragment;
    "getMarketItem(uint256)": FunctionFragment;
    "lend(address,uint256,uint256,uint256)": FunctionFragment;
    "makeOffer(uint256)": FunctionFragment;
    "retrieve(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyDirectly",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMarketItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMarketItemAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketItem",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchAllLendItem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchItemsCreated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchLendHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyBorrow",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "fetchMyLend", values: [string]): string;
  encodeFunctionData(functionFragment: "fetchMyNFTs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fetchOffersOfItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchSellHistoryOfToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lend",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieve",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyDirectly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelLend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMarketItemAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchAllLendItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchItemsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchLendHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyLend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchOffersOfItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchSellHistoryOfToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retrieve", data: BytesLike): Result;

  events: {
    "ItemBorrow(address,uint256,uint256,address)": EventFragment;
    "ItemBuyDirectly(address,uint256,uint256,address,uint256)": EventFragment;
    "ItemCanceled(address,uint256,uint256,address)": EventFragment;
    "LendCanceled(address,uint256,uint256,address)": EventFragment;
    "LendItemCreated(address,uint256,uint256,address,uint256,uint256)": EventFragment;
    "MarketItemCreated(address,uint256,uint256,address,uint256,uint256,uint256)": EventFragment;
    "OfferPlaced(address,uint256,uint256,uint256,address,uint256,uint256)": EventFragment;
    "RetrieveItem(address,uint256,uint256,uint256,uint256,address)": EventFragment;
    "RewardClaimed(address,uint256,uint256,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemBuyDirectly"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendItemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketItemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RetrieveItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
}

export type ItemBorrowEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    nftContract: string;
    itemId: BigNumber;
    tokenId: BigNumber;
    sender: string;
  }
>;

export type ItemBuyDirectlyEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber] & {
    nftContract: string;
    itemId: BigNumber;
    tokenId: BigNumber;
    sender: string;
    currentPrice: BigNumber;
  }
>;

export type ItemCanceledEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    nftContract: string;
    itemId: BigNumber;
    tokenId: BigNumber;
    sender: string;
  }
>;

export type LendCanceledEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    nftContract: string;
    itemId: BigNumber;
    tokenId: BigNumber;
    lender: string;
  }
>;

export type LendItemCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
    nftContract: string;
    itemId: BigNumber;
    tokenId: BigNumber;
    lender: string;
    priceLend: BigNumber;
    lendBlockDuration: BigNumber;
  }
>;

export type MarketItemCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
    nftContract: string;
    itemId: BigNumber;
    tokenId: BigNumber;
    seller: string;
    minPrice: BigNumber;
    maxPrice: BigNumber;
    endBlock: BigNumber;
  }
>;

export type OfferPlacedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
    nftContract: string;
    itemId: BigNumber;
    tokenId: BigNumber;
    offerId: BigNumber;
    asker: string;
    amount: BigNumber;
    blockTime: BigNumber;
  }
>;

export type RetrieveItemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
    nftContract: string;
    itemId: BigNumber;
    tokenId: BigNumber;
    blockTime: BigNumber;
    timestamp: BigNumber;
    sender: string;
  }
>;

export type RewardClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
    nftContract: string;
    itemId: BigNumber;
    tokenId: BigNumber;
    offerId: BigNumber;
    sender: string;
    blockTime: BigNumber;
    currentPrice: BigNumber;
  }
>;

export class NFTMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTMarketInterface;

  functions: {
    borrow(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "borrow(uint256)"(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyDirectly(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyDirectly(uint256)"(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelLend(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelLend(uint256)"(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelMarketItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelMarketItem(uint256)"(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelMarketItemAuction(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelMarketItemAuction(uint256)"(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      itemId: BigNumberish,
      offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimReward(uint256,uint256)"(
      itemId: BigNumberish,
      offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      maxPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createMarketItem(address,uint256,uint256,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      maxPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchAllLendItem(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          boolean,
          boolean,
          BigNumber
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          lender: string;
          borrower: string;
          priceLend: BigNumber;
          lent: boolean;
          paid: boolean;
          isCanceled: boolean;
          lendBlockDuration: BigNumber;
        })[]
      ]
    >;

    "fetchAllLendItem()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          boolean,
          boolean,
          BigNumber
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          lender: string;
          borrower: string;
          priceLend: BigNumber;
          lent: boolean;
          paid: boolean;
          isCanceled: boolean;
          lendBlockDuration: BigNumber;
        })[]
      ]
    >;

    fetchItemsCreated(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          [BigNumber] & { _value: BigNumber }
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          minPrice: BigNumber;
          maxPrice: BigNumber;
          currentPrice: BigNumber;
          endBlock: BigNumber;
          sold: boolean;
          isCanceled: boolean;
          offerCount: [BigNumber] & { _value: BigNumber };
        })[]
      ]
    >;

    "fetchItemsCreated(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          [BigNumber] & { _value: BigNumber }
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          minPrice: BigNumber;
          maxPrice: BigNumber;
          currentPrice: BigNumber;
          endBlock: BigNumber;
          sold: boolean;
          isCanceled: boolean;
          offerCount: [BigNumber] & { _value: BigNumber };
        })[]
      ]
    >;

    fetchLendHistory(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          itemMarketId: BigNumber;
          tokenId: BigNumber;
          lender: string;
          borrower: string;
          priceLend: BigNumber;
          blockNumber: BigNumber;
        })[]
      ]
    >;

    "fetchLendHistory(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          itemMarketId: BigNumber;
          tokenId: BigNumber;
          lender: string;
          borrower: string;
          priceLend: BigNumber;
          blockNumber: BigNumber;
        })[]
      ]
    >;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          [BigNumber] & { _value: BigNumber }
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          minPrice: BigNumber;
          maxPrice: BigNumber;
          currentPrice: BigNumber;
          endBlock: BigNumber;
          sold: boolean;
          isCanceled: boolean;
          offerCount: [BigNumber] & { _value: BigNumber };
        })[]
      ]
    >;

    "fetchMarketItems()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          [BigNumber] & { _value: BigNumber }
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          minPrice: BigNumber;
          maxPrice: BigNumber;
          currentPrice: BigNumber;
          endBlock: BigNumber;
          sold: boolean;
          isCanceled: boolean;
          offerCount: [BigNumber] & { _value: BigNumber };
        })[]
      ]
    >;

    fetchMyBorrow(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          boolean,
          boolean,
          BigNumber
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          lender: string;
          borrower: string;
          priceLend: BigNumber;
          lent: boolean;
          paid: boolean;
          isCanceled: boolean;
          lendBlockDuration: BigNumber;
        })[]
      ]
    >;

    "fetchMyBorrow(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          boolean,
          boolean,
          BigNumber
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          lender: string;
          borrower: string;
          priceLend: BigNumber;
          lent: boolean;
          paid: boolean;
          isCanceled: boolean;
          lendBlockDuration: BigNumber;
        })[]
      ]
    >;

    fetchMyLend(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          boolean,
          boolean,
          BigNumber
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          lender: string;
          borrower: string;
          priceLend: BigNumber;
          lent: boolean;
          paid: boolean;
          isCanceled: boolean;
          lendBlockDuration: BigNumber;
        })[]
      ]
    >;

    "fetchMyLend(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          boolean,
          boolean,
          BigNumber
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          lender: string;
          borrower: string;
          priceLend: BigNumber;
          lent: boolean;
          paid: boolean;
          isCanceled: boolean;
          lendBlockDuration: BigNumber;
        })[]
      ]
    >;

    fetchMyNFTs(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          [BigNumber] & { _value: BigNumber }
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          minPrice: BigNumber;
          maxPrice: BigNumber;
          currentPrice: BigNumber;
          endBlock: BigNumber;
          sold: boolean;
          isCanceled: boolean;
          offerCount: [BigNumber] & { _value: BigNumber };
        })[]
      ]
    >;

    "fetchMyNFTs(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          [BigNumber] & { _value: BigNumber }
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          minPrice: BigNumber;
          maxPrice: BigNumber;
          currentPrice: BigNumber;
          endBlock: BigNumber;
          sold: boolean;
          isCanceled: boolean;
          offerCount: [BigNumber] & { _value: BigNumber };
        })[]
      ]
    >;

    fetchOffersOfItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, boolean, BigNumber] & {
          offerId: BigNumber;
          asker: string;
          amount: BigNumber;
          refundable: boolean;
          blockTime: BigNumber;
        })[]
      ]
    >;

    "fetchOffersOfItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber, boolean, BigNumber] & {
          offerId: BigNumber;
          asker: string;
          amount: BigNumber;
          refundable: boolean;
          blockTime: BigNumber;
        })[]
      ]
    >;

    fetchSellHistoryOfToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          itemMarketId: BigNumber;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          price: BigNumber;
          blockNumber: BigNumber;
        })[]
      ]
    >;

    "fetchSellHistoryOfToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber;
          itemMarketId: BigNumber;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          price: BigNumber;
          blockNumber: BigNumber;
        })[]
      ]
    >;

    getLend(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          boolean,
          boolean,
          BigNumber
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          lender: string;
          borrower: string;
          priceLend: BigNumber;
          lent: boolean;
          paid: boolean;
          isCanceled: boolean;
          lendBlockDuration: BigNumber;
        }
      ]
    >;

    "getLend(uint256)"(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          boolean,
          boolean,
          boolean,
          BigNumber
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          lender: string;
          borrower: string;
          priceLend: BigNumber;
          lent: boolean;
          paid: boolean;
          isCanceled: boolean;
          lendBlockDuration: BigNumber;
        }
      ]
    >;

    getListingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getListingPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          [BigNumber] & { _value: BigNumber }
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          minPrice: BigNumber;
          maxPrice: BigNumber;
          currentPrice: BigNumber;
          endBlock: BigNumber;
          sold: boolean;
          isCanceled: boolean;
          offerCount: [BigNumber] & { _value: BigNumber };
        }
      ]
    >;

    "getMarketItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          [BigNumber] & { _value: BigNumber }
        ] & {
          nftContract: string;
          itemId: BigNumber;
          tokenId: BigNumber;
          seller: string;
          buyer: string;
          minPrice: BigNumber;
          maxPrice: BigNumber;
          currentPrice: BigNumber;
          endBlock: BigNumber;
          sold: boolean;
          isCanceled: boolean;
          offerCount: [BigNumber] & { _value: BigNumber };
        }
      ]
    >;

    lend(
      nftContract: string,
      tokenId: BigNumberish,
      priceLend: BigNumberish,
      lendBlockDuration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lend(address,uint256,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      priceLend: BigNumberish,
      lendBlockDuration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeOffer(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "makeOffer(uint256)"(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieve(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "retrieve(uint256)"(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrow(
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "borrow(uint256)"(
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyDirectly(
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyDirectly(uint256)"(
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelLend(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelLend(uint256)"(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelMarketItem(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelMarketItem(uint256)"(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelMarketItemAuction(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelMarketItemAuction(uint256)"(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    itemId: BigNumberish,
    offerId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimReward(uint256,uint256)"(
    itemId: BigNumberish,
    offerId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createMarketItem(
    nftContract: string,
    tokenId: BigNumberish,
    minPrice: BigNumberish,
    maxPrice: BigNumberish,
    endBlock: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createMarketItem(address,uint256,uint256,uint256,uint256)"(
    nftContract: string,
    tokenId: BigNumberish,
    minPrice: BigNumberish,
    maxPrice: BigNumberish,
    endBlock: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchAllLendItem(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      lender: string;
      borrower: string;
      priceLend: BigNumber;
      lent: boolean;
      paid: boolean;
      isCanceled: boolean;
      lendBlockDuration: BigNumber;
    })[]
  >;

  "fetchAllLendItem()"(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      lender: string;
      borrower: string;
      priceLend: BigNumber;
      lent: boolean;
      paid: boolean;
      isCanceled: boolean;
      lendBlockDuration: BigNumber;
    })[]
  >;

  fetchItemsCreated(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      [BigNumber] & { _value: BigNumber }
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      minPrice: BigNumber;
      maxPrice: BigNumber;
      currentPrice: BigNumber;
      endBlock: BigNumber;
      sold: boolean;
      isCanceled: boolean;
      offerCount: [BigNumber] & { _value: BigNumber };
    })[]
  >;

  "fetchItemsCreated(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      [BigNumber] & { _value: BigNumber }
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      minPrice: BigNumber;
      maxPrice: BigNumber;
      currentPrice: BigNumber;
      endBlock: BigNumber;
      sold: boolean;
      isCanceled: boolean;
      offerCount: [BigNumber] & { _value: BigNumber };
    })[]
  >;

  fetchLendHistory(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
      id: BigNumber;
      itemMarketId: BigNumber;
      tokenId: BigNumber;
      lender: string;
      borrower: string;
      priceLend: BigNumber;
      blockNumber: BigNumber;
    })[]
  >;

  "fetchLendHistory(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
      id: BigNumber;
      itemMarketId: BigNumber;
      tokenId: BigNumber;
      lender: string;
      borrower: string;
      priceLend: BigNumber;
      blockNumber: BigNumber;
    })[]
  >;

  fetchMarketItems(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      [BigNumber] & { _value: BigNumber }
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      minPrice: BigNumber;
      maxPrice: BigNumber;
      currentPrice: BigNumber;
      endBlock: BigNumber;
      sold: boolean;
      isCanceled: boolean;
      offerCount: [BigNumber] & { _value: BigNumber };
    })[]
  >;

  "fetchMarketItems()"(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      [BigNumber] & { _value: BigNumber }
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      minPrice: BigNumber;
      maxPrice: BigNumber;
      currentPrice: BigNumber;
      endBlock: BigNumber;
      sold: boolean;
      isCanceled: boolean;
      offerCount: [BigNumber] & { _value: BigNumber };
    })[]
  >;

  fetchMyBorrow(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      lender: string;
      borrower: string;
      priceLend: BigNumber;
      lent: boolean;
      paid: boolean;
      isCanceled: boolean;
      lendBlockDuration: BigNumber;
    })[]
  >;

  "fetchMyBorrow(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      lender: string;
      borrower: string;
      priceLend: BigNumber;
      lent: boolean;
      paid: boolean;
      isCanceled: boolean;
      lendBlockDuration: BigNumber;
    })[]
  >;

  fetchMyLend(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      lender: string;
      borrower: string;
      priceLend: BigNumber;
      lent: boolean;
      paid: boolean;
      isCanceled: boolean;
      lendBlockDuration: BigNumber;
    })[]
  >;

  "fetchMyLend(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      lender: string;
      borrower: string;
      priceLend: BigNumber;
      lent: boolean;
      paid: boolean;
      isCanceled: boolean;
      lendBlockDuration: BigNumber;
    })[]
  >;

  fetchMyNFTs(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      [BigNumber] & { _value: BigNumber }
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      minPrice: BigNumber;
      maxPrice: BigNumber;
      currentPrice: BigNumber;
      endBlock: BigNumber;
      sold: boolean;
      isCanceled: boolean;
      offerCount: [BigNumber] & { _value: BigNumber };
    })[]
  >;

  "fetchMyNFTs(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      [BigNumber] & { _value: BigNumber }
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      minPrice: BigNumber;
      maxPrice: BigNumber;
      currentPrice: BigNumber;
      endBlock: BigNumber;
      sold: boolean;
      isCanceled: boolean;
      offerCount: [BigNumber] & { _value: BigNumber };
    })[]
  >;

  fetchOffersOfItem(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, boolean, BigNumber] & {
      offerId: BigNumber;
      asker: string;
      amount: BigNumber;
      refundable: boolean;
      blockTime: BigNumber;
    })[]
  >;

  "fetchOffersOfItem(uint256)"(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber, boolean, BigNumber] & {
      offerId: BigNumber;
      asker: string;
      amount: BigNumber;
      refundable: boolean;
      blockTime: BigNumber;
    })[]
  >;

  fetchSellHistoryOfToken(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
      id: BigNumber;
      itemMarketId: BigNumber;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      price: BigNumber;
      blockNumber: BigNumber;
    })[]
  >;

  "fetchSellHistoryOfToken(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, string, string, BigNumber, BigNumber] & {
      id: BigNumber;
      itemMarketId: BigNumber;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      price: BigNumber;
      blockNumber: BigNumber;
    })[]
  >;

  getLend(
    _itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      lender: string;
      borrower: string;
      priceLend: BigNumber;
      lent: boolean;
      paid: boolean;
      isCanceled: boolean;
      lendBlockDuration: BigNumber;
    }
  >;

  "getLend(uint256)"(
    _itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      boolean,
      boolean,
      boolean,
      BigNumber
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      lender: string;
      borrower: string;
      priceLend: BigNumber;
      lent: boolean;
      paid: boolean;
      isCanceled: boolean;
      lendBlockDuration: BigNumber;
    }
  >;

  getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "getListingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketItem(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      [BigNumber] & { _value: BigNumber }
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      minPrice: BigNumber;
      maxPrice: BigNumber;
      currentPrice: BigNumber;
      endBlock: BigNumber;
      sold: boolean;
      isCanceled: boolean;
      offerCount: [BigNumber] & { _value: BigNumber };
    }
  >;

  "getMarketItem(uint256)"(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      [BigNumber] & { _value: BigNumber }
    ] & {
      nftContract: string;
      itemId: BigNumber;
      tokenId: BigNumber;
      seller: string;
      buyer: string;
      minPrice: BigNumber;
      maxPrice: BigNumber;
      currentPrice: BigNumber;
      endBlock: BigNumber;
      sold: boolean;
      isCanceled: boolean;
      offerCount: [BigNumber] & { _value: BigNumber };
    }
  >;

  lend(
    nftContract: string,
    tokenId: BigNumberish,
    priceLend: BigNumberish,
    lendBlockDuration: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lend(address,uint256,uint256,uint256)"(
    nftContract: string,
    tokenId: BigNumberish,
    priceLend: BigNumberish,
    lendBlockDuration: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeOffer(
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "makeOffer(uint256)"(
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieve(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "retrieve(uint256)"(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrow(itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "borrow(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyDirectly(itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "buyDirectly(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelLend(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancelLend(uint256)"(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelMarketItem(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelMarketItem(uint256)"(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelMarketItemAuction(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelMarketItemAuction(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      itemId: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReward(uint256,uint256)"(
      itemId: BigNumberish,
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      maxPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createMarketItem(address,uint256,uint256,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      maxPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchAllLendItem(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        borrower: string;
        priceLend: BigNumber;
        lent: boolean;
        paid: boolean;
        isCanceled: boolean;
        lendBlockDuration: BigNumber;
      })[]
    >;

    "fetchAllLendItem()"(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        borrower: string;
        priceLend: BigNumber;
        lent: boolean;
        paid: boolean;
        isCanceled: boolean;
        lendBlockDuration: BigNumber;
      })[]
    >;

    fetchItemsCreated(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        [BigNumber] & { _value: BigNumber }
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        currentPrice: BigNumber;
        endBlock: BigNumber;
        sold: boolean;
        isCanceled: boolean;
        offerCount: [BigNumber] & { _value: BigNumber };
      })[]
    >;

    "fetchItemsCreated(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        [BigNumber] & { _value: BigNumber }
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        currentPrice: BigNumber;
        endBlock: BigNumber;
        sold: boolean;
        isCanceled: boolean;
        offerCount: [BigNumber] & { _value: BigNumber };
      })[]
    >;

    fetchLendHistory(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        itemMarketId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        borrower: string;
        priceLend: BigNumber;
        blockNumber: BigNumber;
      })[]
    >;

    "fetchLendHistory(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        itemMarketId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        borrower: string;
        priceLend: BigNumber;
        blockNumber: BigNumber;
      })[]
    >;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        [BigNumber] & { _value: BigNumber }
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        currentPrice: BigNumber;
        endBlock: BigNumber;
        sold: boolean;
        isCanceled: boolean;
        offerCount: [BigNumber] & { _value: BigNumber };
      })[]
    >;

    "fetchMarketItems()"(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        [BigNumber] & { _value: BigNumber }
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        currentPrice: BigNumber;
        endBlock: BigNumber;
        sold: boolean;
        isCanceled: boolean;
        offerCount: [BigNumber] & { _value: BigNumber };
      })[]
    >;

    fetchMyBorrow(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        borrower: string;
        priceLend: BigNumber;
        lent: boolean;
        paid: boolean;
        isCanceled: boolean;
        lendBlockDuration: BigNumber;
      })[]
    >;

    "fetchMyBorrow(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        borrower: string;
        priceLend: BigNumber;
        lent: boolean;
        paid: boolean;
        isCanceled: boolean;
        lendBlockDuration: BigNumber;
      })[]
    >;

    fetchMyLend(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        borrower: string;
        priceLend: BigNumber;
        lent: boolean;
        paid: boolean;
        isCanceled: boolean;
        lendBlockDuration: BigNumber;
      })[]
    >;

    "fetchMyLend(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        borrower: string;
        priceLend: BigNumber;
        lent: boolean;
        paid: boolean;
        isCanceled: boolean;
        lendBlockDuration: BigNumber;
      })[]
    >;

    fetchMyNFTs(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        [BigNumber] & { _value: BigNumber }
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        currentPrice: BigNumber;
        endBlock: BigNumber;
        sold: boolean;
        isCanceled: boolean;
        offerCount: [BigNumber] & { _value: BigNumber };
      })[]
    >;

    "fetchMyNFTs(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        [BigNumber] & { _value: BigNumber }
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        currentPrice: BigNumber;
        endBlock: BigNumber;
        sold: boolean;
        isCanceled: boolean;
        offerCount: [BigNumber] & { _value: BigNumber };
      })[]
    >;

    fetchOffersOfItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, boolean, BigNumber] & {
        offerId: BigNumber;
        asker: string;
        amount: BigNumber;
        refundable: boolean;
        blockTime: BigNumber;
      })[]
    >;

    "fetchOffersOfItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber, boolean, BigNumber] & {
        offerId: BigNumber;
        asker: string;
        amount: BigNumber;
        refundable: boolean;
        blockTime: BigNumber;
      })[]
    >;

    fetchSellHistoryOfToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        itemMarketId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        price: BigNumber;
        blockNumber: BigNumber;
      })[]
    >;

    "fetchSellHistoryOfToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        itemMarketId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        price: BigNumber;
        blockNumber: BigNumber;
      })[]
    >;

    getLend(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        borrower: string;
        priceLend: BigNumber;
        lent: boolean;
        paid: boolean;
        isCanceled: boolean;
        lendBlockDuration: BigNumber;
      }
    >;

    "getLend(uint256)"(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        boolean,
        boolean,
        boolean,
        BigNumber
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        borrower: string;
        priceLend: BigNumber;
        lent: boolean;
        paid: boolean;
        isCanceled: boolean;
        lendBlockDuration: BigNumber;
      }
    >;

    getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getListingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        [BigNumber] & { _value: BigNumber }
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        currentPrice: BigNumber;
        endBlock: BigNumber;
        sold: boolean;
        isCanceled: boolean;
        offerCount: [BigNumber] & { _value: BigNumber };
      }
    >;

    "getMarketItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        [BigNumber] & { _value: BigNumber }
      ] & {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        buyer: string;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        currentPrice: BigNumber;
        endBlock: BigNumber;
        sold: boolean;
        isCanceled: boolean;
        offerCount: [BigNumber] & { _value: BigNumber };
      }
    >;

    lend(
      nftContract: string,
      tokenId: BigNumberish,
      priceLend: BigNumberish,
      lendBlockDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lend(address,uint256,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      priceLend: BigNumberish,
      lendBlockDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeOffer(itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "makeOffer(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieve(itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "retrieve(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemBorrow(address,uint256,uint256,address)"(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      sender?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        sender: string;
      }
    >;

    ItemBorrow(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      sender?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        sender: string;
      }
    >;

    "ItemBuyDirectly(address,uint256,uint256,address,uint256)"(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      sender?: null,
      currentPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        sender: string;
        currentPrice: BigNumber;
      }
    >;

    ItemBuyDirectly(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      sender?: null,
      currentPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        sender: string;
        currentPrice: BigNumber;
      }
    >;

    "ItemCanceled(address,uint256,uint256,address)"(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      sender?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        sender: string;
      }
    >;

    ItemCanceled(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      sender?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        sender: string;
      }
    >;

    "LendCanceled(address,uint256,uint256,address)"(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      lender?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
      }
    >;

    LendCanceled(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      lender?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
      }
    >;

    "LendItemCreated(address,uint256,uint256,address,uint256,uint256)"(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      lender?: null,
      priceLend?: null,
      lendBlockDuration?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        priceLend: BigNumber;
        lendBlockDuration: BigNumber;
      }
    >;

    LendItemCreated(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      lender?: null,
      priceLend?: null,
      lendBlockDuration?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        lender: string;
        priceLend: BigNumber;
        lendBlockDuration: BigNumber;
      }
    >;

    "MarketItemCreated(address,uint256,uint256,address,uint256,uint256,uint256)"(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      seller?: null,
      minPrice?: null,
      maxPrice?: null,
      endBlock?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        endBlock: BigNumber;
      }
    >;

    MarketItemCreated(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      seller?: null,
      minPrice?: null,
      maxPrice?: null,
      endBlock?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        seller: string;
        minPrice: BigNumber;
        maxPrice: BigNumber;
        endBlock: BigNumber;
      }
    >;

    "OfferPlaced(address,uint256,uint256,uint256,address,uint256,uint256)"(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      offerId?: null,
      asker?: null,
      amount?: null,
      blockTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        offerId: BigNumber;
        asker: string;
        amount: BigNumber;
        blockTime: BigNumber;
      }
    >;

    OfferPlaced(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      offerId?: null,
      asker?: null,
      amount?: null,
      blockTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        offerId: BigNumber;
        asker: string;
        amount: BigNumber;
        blockTime: BigNumber;
      }
    >;

    "RetrieveItem(address,uint256,uint256,uint256,uint256,address)"(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      blockTime?: null,
      timestamp?: null,
      sender?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        blockTime: BigNumber;
        timestamp: BigNumber;
        sender: string;
      }
    >;

    RetrieveItem(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      blockTime?: null,
      timestamp?: null,
      sender?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        blockTime: BigNumber;
        timestamp: BigNumber;
        sender: string;
      }
    >;

    "RewardClaimed(address,uint256,uint256,uint256,address,uint256,uint256)"(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      offerId?: null,
      sender?: null,
      blockTime?: null,
      currentPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        offerId: BigNumber;
        sender: string;
        blockTime: BigNumber;
        currentPrice: BigNumber;
      }
    >;

    RewardClaimed(
      nftContract?: null,
      itemId?: null,
      tokenId?: null,
      offerId?: null,
      sender?: null,
      blockTime?: null,
      currentPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        nftContract: string;
        itemId: BigNumber;
        tokenId: BigNumber;
        offerId: BigNumber;
        sender: string;
        blockTime: BigNumber;
        currentPrice: BigNumber;
      }
    >;
  };

  estimateGas: {
    borrow(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "borrow(uint256)"(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyDirectly(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyDirectly(uint256)"(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelLend(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelLend(uint256)"(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelMarketItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelMarketItem(uint256)"(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelMarketItemAuction(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelMarketItemAuction(uint256)"(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      itemId: BigNumberish,
      offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimReward(uint256,uint256)"(
      itemId: BigNumberish,
      offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      maxPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createMarketItem(address,uint256,uint256,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      maxPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchAllLendItem(overrides?: CallOverrides): Promise<BigNumber>;

    "fetchAllLendItem()"(overrides?: CallOverrides): Promise<BigNumber>;

    fetchItemsCreated(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fetchItemsCreated(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchLendHistory(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fetchLendHistory(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

    "fetchMarketItems()"(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMyBorrow(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "fetchMyBorrow(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchMyLend(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "fetchMyLend(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchMyNFTs(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "fetchMyNFTs(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchOffersOfItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fetchOffersOfItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchSellHistoryOfToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fetchSellHistoryOfToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLend(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLend(uint256)"(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getListingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      nftContract: string,
      tokenId: BigNumberish,
      priceLend: BigNumberish,
      lendBlockDuration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lend(address,uint256,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      priceLend: BigNumberish,
      lendBlockDuration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeOffer(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "makeOffer(uint256)"(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieve(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "retrieve(uint256)"(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrow(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(uint256)"(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyDirectly(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyDirectly(uint256)"(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelLend(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelLend(uint256)"(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelMarketItem(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelMarketItem(uint256)"(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelMarketItemAuction(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelMarketItemAuction(uint256)"(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      itemId: BigNumberish,
      offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimReward(uint256,uint256)"(
      itemId: BigNumberish,
      offerId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      maxPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createMarketItem(address,uint256,uint256,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      minPrice: BigNumberish,
      maxPrice: BigNumberish,
      endBlock: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchAllLendItem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fetchAllLendItem()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchItemsCreated(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fetchItemsCreated(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchLendHistory(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fetchLendHistory(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchMarketItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fetchMarketItems()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchMyBorrow(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fetchMyBorrow(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchMyLend(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fetchMyLend(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchMyNFTs(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fetchMyNFTs(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchOffersOfItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fetchOffersOfItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchSellHistoryOfToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fetchSellHistoryOfToken(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLend(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLend(uint256)"(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getListingPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketItem(uint256)"(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lend(
      nftContract: string,
      tokenId: BigNumberish,
      priceLend: BigNumberish,
      lendBlockDuration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lend(address,uint256,uint256,uint256)"(
      nftContract: string,
      tokenId: BigNumberish,
      priceLend: BigNumberish,
      lendBlockDuration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeOffer(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "makeOffer(uint256)"(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieve(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "retrieve(uint256)"(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
