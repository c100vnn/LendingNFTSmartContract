/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "addStakePackage(uint256,uint256,uint256)": FunctionFragment;
    "calculateMyProfit(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "getAprOfPackage(uint256)": FunctionFragment;
    "getStakeInfo(uint256)": FunctionFragment;
    "getStakePackages()": FunctionFragment;
    "mainToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeStakePackage(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserve()": FunctionFragment;
    "setMaxStake(uint256)": FunctionFragment;
    "setReserve(address)": FunctionFragment;
    "stake(uint256,uint256)": FunctionFragment;
    "stakePackages(uint256)": FunctionFragment;
    "stakes(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unStake(uint256)": FunctionFragment;
    "updateStakePackage(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addStakePackage",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMyProfit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAprOfPackage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakePackages",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mainToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeStakePackage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMaxStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setReserve", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakePackages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakePackage",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addStakePackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMyProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAprOfPackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakePackages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mainToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStakePackage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakePackages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStakePackage",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "StakeReleased(address,uint256,uint256,uint256,uint256)": EventFragment;
    "StakeUpdate(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeUpdate"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type StakeReleasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    account: string;
    packageId: BigNumber;
    timestamp: BigNumber;
    amount: BigNumber;
    totalProfit: BigNumber;
  }
>;

export type StakeUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    account: string;
    packageId: BigNumber;
    timestamp: BigNumber;
    amount: BigNumber;
    totalProfit: BigNumber;
  }
>;

export class Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingInterface;

  functions: {
    addStakePackage(
      _rate: BigNumberish,
      _minStaking: BigNumberish,
      _lockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addStakePackage(uint256,uint256,uint256)"(
      _rate: BigNumberish,
      _minStaking: BigNumberish,
      _lockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateMyProfit(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateMyProfit(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    getAprOfPackage(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getAprOfPackage(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakeInfo(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getStakeInfo(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getStakePackages(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber] & {
          rate: BigNumber;
          minStaking: BigNumber;
          lockDays: BigNumber;
        })[]
      ]
    >;

    "getStakePackages()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber] & {
          rate: BigNumber;
          minStaking: BigNumber;
          lockDays: BigNumber;
        })[]
      ]
    >;

    mainToken(overrides?: CallOverrides): Promise<[string]>;

    "mainToken()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeStakePackage(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeStakePackage(uint256)"(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    "reserve()"(overrides?: CallOverrides): Promise<[string]>;

    setMaxStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMaxStake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserve(
      _reserveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReserve(address)"(
      _reserveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(uint256,uint256)"(
      _amount: BigNumberish,
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakePackages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        minStaking: BigNumber;
        lockDays: BigNumber;
      }
    >;

    "stakePackages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        minStaking: BigNumber;
        lockDays: BigNumber;
      }
    >;

    stakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        timePoint: BigNumber;
        amount: BigNumber;
        totalProfit: BigNumber;
      }
    >;

    "stakes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        timePoint: BigNumber;
        amount: BigNumber;
        totalProfit: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unStake(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unStake(uint256)"(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStakePackage(
      _packageId: BigNumberish,
      _newRate: BigNumberish,
      _newMinStaking: BigNumberish,
      _newLockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateStakePackage(uint256,uint256,uint256,uint256)"(
      _packageId: BigNumberish,
      _newRate: BigNumberish,
      _newMinStaking: BigNumberish,
      _newLockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addStakePackage(
    _rate: BigNumberish,
    _minStaking: BigNumberish,
    _lockDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addStakePackage(uint256,uint256,uint256)"(
    _rate: BigNumberish,
    _minStaking: BigNumberish,
    _lockDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateMyProfit(
    _packageId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateMyProfit(uint256)"(
    _packageId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  getAprOfPackage(
    _packageId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAprOfPackage(uint256)"(
    _packageId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakeInfo(
    _packageId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getStakeInfo(uint256)"(
    _packageId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getStakePackages(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      minStaking: BigNumber;
      lockDays: BigNumber;
    })[]
  >;

  "getStakePackages()"(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      minStaking: BigNumber;
      lockDays: BigNumber;
    })[]
  >;

  mainToken(overrides?: CallOverrides): Promise<string>;

  "mainToken()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeStakePackage(
    _packageId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeStakePackage(uint256)"(
    _packageId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve(overrides?: CallOverrides): Promise<string>;

  "reserve()"(overrides?: CallOverrides): Promise<string>;

  setMaxStake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMaxStake(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserve(
    _reserveAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReserve(address)"(
    _reserveAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    _packageId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(uint256,uint256)"(
    _amount: BigNumberish,
    _packageId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakePackages(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      minStaking: BigNumber;
      lockDays: BigNumber;
    }
  >;

  "stakePackages(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      minStaking: BigNumber;
      lockDays: BigNumber;
    }
  >;

  stakes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      timePoint: BigNumber;
      amount: BigNumber;
      totalProfit: BigNumber;
    }
  >;

  "stakes(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      startTime: BigNumber;
      timePoint: BigNumber;
      amount: BigNumber;
      totalProfit: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unStake(
    _packageId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unStake(uint256)"(
    _packageId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStakePackage(
    _packageId: BigNumberish,
    _newRate: BigNumberish,
    _newMinStaking: BigNumberish,
    _newLockDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateStakePackage(uint256,uint256,uint256,uint256)"(
    _packageId: BigNumberish,
    _newRate: BigNumberish,
    _newMinStaking: BigNumberish,
    _newLockDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addStakePackage(
      _rate: BigNumberish,
      _minStaking: BigNumberish,
      _lockDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addStakePackage(uint256,uint256,uint256)"(
      _rate: BigNumberish,
      _minStaking: BigNumberish,
      _lockDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateMyProfit(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateMyProfit(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    getAprOfPackage(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAprOfPackage(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getStakeInfo(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getStakePackages(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        minStaking: BigNumber;
        lockDays: BigNumber;
      })[]
    >;

    "getStakePackages()"(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        minStaking: BigNumber;
        lockDays: BigNumber;
      })[]
    >;

    mainToken(overrides?: CallOverrides): Promise<string>;

    "mainToken()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeStakePackage(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeStakePackage(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    reserve(overrides?: CallOverrides): Promise<string>;

    "reserve()"(overrides?: CallOverrides): Promise<string>;

    setMaxStake(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxStake(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserve(
      _reserveAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReserve(address)"(
      _reserveAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _amount: BigNumberish,
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256,uint256)"(
      _amount: BigNumberish,
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakePackages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        minStaking: BigNumber;
        lockDays: BigNumber;
      }
    >;

    "stakePackages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        minStaking: BigNumber;
        lockDays: BigNumber;
      }
    >;

    stakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        timePoint: BigNumber;
        amount: BigNumber;
        totalProfit: BigNumber;
      }
    >;

    "stakes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        startTime: BigNumber;
        timePoint: BigNumber;
        amount: BigNumber;
        totalProfit: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unStake(_packageId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unStake(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStakePackage(
      _packageId: BigNumberish,
      _newRate: BigNumberish,
      _newMinStaking: BigNumberish,
      _newLockDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateStakePackage(uint256,uint256,uint256,uint256)"(
      _packageId: BigNumberish,
      _newRate: BigNumberish,
      _newMinStaking: BigNumberish,
      _newLockDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "StakeReleased(address,uint256,uint256,uint256,uint256)"(
      account?: null,
      packageId?: null,
      timestamp?: null,
      amount?: null,
      totalProfit?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        packageId: BigNumber;
        timestamp: BigNumber;
        amount: BigNumber;
        totalProfit: BigNumber;
      }
    >;

    StakeReleased(
      account?: null,
      packageId?: null,
      timestamp?: null,
      amount?: null,
      totalProfit?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        packageId: BigNumber;
        timestamp: BigNumber;
        amount: BigNumber;
        totalProfit: BigNumber;
      }
    >;

    "StakeUpdate(address,uint256,uint256,uint256,uint256)"(
      account?: null,
      packageId?: null,
      timestamp?: null,
      amount?: null,
      totalProfit?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        packageId: BigNumber;
        timestamp: BigNumber;
        amount: BigNumber;
        totalProfit: BigNumber;
      }
    >;

    StakeUpdate(
      account?: null,
      packageId?: null,
      timestamp?: null,
      amount?: null,
      totalProfit?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        packageId: BigNumber;
        timestamp: BigNumber;
        amount: BigNumber;
        totalProfit: BigNumber;
      }
    >;
  };

  estimateGas: {
    addStakePackage(
      _rate: BigNumberish,
      _minStaking: BigNumberish,
      _lockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addStakePackage(uint256,uint256,uint256)"(
      _rate: BigNumberish,
      _minStaking: BigNumberish,
      _lockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateMyProfit(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateMyProfit(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAprOfPackage(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAprOfPackage(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakeInfo(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakePackages(overrides?: CallOverrides): Promise<BigNumber>;

    "getStakePackages()"(overrides?: CallOverrides): Promise<BigNumber>;

    mainToken(overrides?: CallOverrides): Promise<BigNumber>;

    "mainToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeStakePackage(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeStakePackage(uint256)"(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    "reserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMaxStake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserve(
      _reserveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReserve(address)"(
      _reserveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(uint256,uint256)"(
      _amount: BigNumberish,
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakePackages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakePackages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unStake(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unStake(uint256)"(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStakePackage(
      _packageId: BigNumberish,
      _newRate: BigNumberish,
      _newMinStaking: BigNumberish,
      _newLockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateStakePackage(uint256,uint256,uint256,uint256)"(
      _packageId: BigNumberish,
      _newRate: BigNumberish,
      _newMinStaking: BigNumberish,
      _newLockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStakePackage(
      _rate: BigNumberish,
      _minStaking: BigNumberish,
      _lockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addStakePackage(uint256,uint256,uint256)"(
      _rate: BigNumberish,
      _minStaking: BigNumberish,
      _lockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateMyProfit(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateMyProfit(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAprOfPackage(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAprOfPackage(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStakeInfo(uint256)"(
      _packageId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakePackages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStakePackages()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mainToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStakePackage(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeStakePackage(uint256)"(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reserve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaxStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMaxStake(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserve(
      _reserveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReserve(address)"(
      _reserveAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(uint256,uint256)"(
      _amount: BigNumberish,
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakePackages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakePackages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unStake(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unStake(uint256)"(
      _packageId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStakePackage(
      _packageId: BigNumberish,
      _newRate: BigNumberish,
      _newMinStaking: BigNumberish,
      _newLockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateStakePackage(uint256,uint256,uint256,uint256)"(
      _packageId: BigNumberish,
      _newRate: BigNumberish,
      _newMinStaking: BigNumberish,
      _newLockDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
